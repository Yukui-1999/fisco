package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ZS01 extends Contract {
    public static final String[] BINARY_ARRAY = {"","5050602060405180830381600087803b158015610e8757600080fd5b505af1158015610e9b573d6000803e3d6000fd5b505050506040513d6020811015610eb157600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f746f74616c5f6861736800000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610f6657600080fd5b505af1158015610f7a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610fa457600080fd5b810190808051640100000000811115610fbc57600080fd5b82810190506020810184811115610fd257600080fd5b8151856001820283011164010000000082111715610fef57600080fd5b50509291905050508273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f706172745f686173680000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561109757600080fd5b505af11580156110ab573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156110d557600080fd5b8101908080516401000000008111156110ed57600080fd5b8281019050602081018481111561110357600080fd5b815185600182028301116401000000008211171561112057600080fd5b50509291905050508373ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f726573756c740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b505050506040513d60208110156111f257600080fd5b810190808051906020019092919050505083935099509950995099505b5050505050509193509193565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260078152602001807f5a537461626c6500000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156112c657600080fd5b505af11580156112da573d6000803e3d6000fd5b505050506040513d60208110156112f057600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a723058202482bea10e38919e58a044548a4fe5ad974ad88c563ae31bd6f9b75062d374fb0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","5050602060405180830381600087803b158015610e8757600080fd5b505af1158015610e9b573d6000803e3d6000fd5b505050506040513d6020811015610eb157600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f746f74616c5f6861736800000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015610f6657600080fd5b505af1158015610f7a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610fa457600080fd5b810190808051640100000000811115610fbc57600080fd5b82810190506020810184811115610fd257600080fd5b8151856001820283011164010000000082111715610fef57600080fd5b50509291905050508273ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f706172745f686173680000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561109757600080fd5b505af11580156110ab573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156110d557600080fd5b8101908080516401000000008111156110ed57600080fd5b8281019050602081018481111561110357600080fd5b815185600182028301116401000000008211171561112057600080fd5b50509291905050508373ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f726573756c740000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b505050506040513d60208110156111f257600080fd5b810190808051906020019092919050505083935099509950995099505b5050505050509193509193565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260078152602001807f5a537461626c6500000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156112c657600080fd5b505af11580156112da573d6000803e3d6000fd5b505050506040513d60208110156112f057600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a723058209378666dd8ef5834791ff9ff5455cd08c2fd561b3d9fa7e4c35c433130d0104e0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"id_time\",\"type\":\"string\"},{\"name\":\"total_hash\",\"type\":\"string\"},{\"name\":\"part_hash\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"int256\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id_time\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"id_time\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"total_hash\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"part_hash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"int256\"}],\"name\":\"RegisterdataEvent\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    public static final Event REGISTERDATAEVENT_EVENT = new Event("RegisterdataEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Int256>() {}));
    ;

    protected ZS01(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt register(String id_time, String total_hash, String part_hash, BigInteger result) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(id_time),
                new Utf8String(total_hash),
                new Utf8String(part_hash),
                new Int256(result)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String id_time, String total_hash, String part_hash, BigInteger result, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(id_time),
                new Utf8String(total_hash),
                new Utf8String(part_hash),
                new Int256(result)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String id_time, String total_hash, String part_hash, BigInteger result) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(id_time),
                new Utf8String(total_hash),
                new Utf8String(part_hash),
                new Int256(result)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple4<BigInteger, String, String, BigInteger> select(String id_time) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(id_time)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue());
    }

    public List<RegisterdataEventEventResponse> getRegisterdataEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTERDATAEVENT_EVENT, transactionReceipt);
        ArrayList<RegisterdataEventEventResponse> responses = new ArrayList<RegisterdataEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterdataEventEventResponse typedResponse = new RegisterdataEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id_time = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.total_hash = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.part_hash = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.result = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterdataEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTERDATAEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterdataEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTERDATAEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ZS01 load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ZS01(contractAddress, client, credential);
    }

    public static ZS01 deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ZS01.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class RegisterdataEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] id_time;

        public byte[] total_hash;

        public byte[] part_hash;

        public BigInteger ret;

        public BigInteger result;
    }
}
